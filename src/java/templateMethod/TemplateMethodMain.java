package templateMethod;

import templateMethod.concreteUnits.Archer;
import templateMethod.concreteUnits.Cavalry;

/*
    Шаблонный метод(Template method) – это поведенческий паттерн проектирования, который определяет
    скелет алгоритма, перекладывая ответственность за некоторые его шаги на подклассы.
    Паттерн позволяет подклассам переопределять шаги алгоритма, не меняя его общей структуры.

    Паттерн Шаблонный метод предлагает разбить алгоритм на последовательность шагов, описать эти шаги
    в отдельных методах и вызывать их в одном шаблонном методе друг за другом.
    Это позволит подклассам переопределять некоторые шаги алгоритма, оставляя без изменений его структуру
    и остальные шаги, которые для этого подкласса не так важны.

    Реализация шаблонного метода:

    Для начала шаги шаблонного метода можно сделать абстрактными.
    Из-за этого все подклассы должны будут реализовать каждый из шагов по-своему.

    По-настоящему важным является следующий этап. Теперь мы можем определить общее для всех классов
    поведение и вынести его в суперкласс.

    Как видите, у нас получилось два вида шагов: абстрактные, которые каждый подкласс обязательно
    должен реализовать, а также шаги с реализацией по умолчанию, которые можно переопределять в подклассах,
    но не обязательно.

    Но есть и третий тип шагов – хуки: их не обязательно переопределять, но они не содержат никакого кода,
    выглядя как обычные методы. Шаблонный метод останется рабочим, даже если ни один подкласс не переопределит
    такой хук. Однако, хук даёт подклассам дополнительные точки «вклинивания» в шаблонный метод.

    Применимость
        -Однократное использование инвариантной части алгоритма,
            с оставлением изменяющейся части на усмотрение наследникам.
        -Локализация и вычленение общего для нескольких классов кода для избегания дублирования.
        -Разрешение расширения кода наследниками только в определенных местах.

    Шаблонный метод и Стратегия
    Разница между шаблонным методом и стратегией, не столько в семантике, сколько в реализации.
    Используете наследование и переопределение методов? Шаблонный метод.
    Используете объект, получающий часть снаружи? Стратегия.
 */
public class TemplateMethodMain {
    public static void main(String[] args) {
        Unit archer = new Archer();
        Unit cavalry = new Cavalry();

        archer.attackFromARun();
        System.out.println("---------------------------------------");
        cavalry.attackFromARun();
    }
}
/*
    Преимущества
        +Облегчает повторное использование кода.
        +Устраняет дублирование кода
    Недостатки
        -Вы жёстко ограничены скелетом существующего алгоритма.
        -Вы можете нарушить принцип подстановки Барбары Лисков,
            изменяя базовое поведение одного из шагов алгоритма через подкласс.
        -С ростом количества шагов шаблонный метод становится слишком сложно поддерживать.
 */

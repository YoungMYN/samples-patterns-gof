package singleton;

/*
Иногда необходимо написать класс, у которого можно будет создать только один объект.
Например, класс, отвечающий за логирование или подключение к базе данных.
Шаблон проектирования синглтон описывает, как мы можем выполнить такую задачу.

Синглтон — это шаблон (паттерн) проектирования, который делает две вещи:
    1)Дает гарантию, что у класса будет всего один экземпляр класса.
    2)Предоставляет глобальную точку доступа к экземпляру данного класса.
Отсюда — две особенности, характерные для практически каждой реализации паттерна синглтон:
    1)Приватный конструктор. Ограничивает возможность создания объектов класса за пределами самого класса.
    2)Публичный статический метод, который возвращает экземпляр класса. Данный метод называют getInstance.
     Это глобальная точка доступа к экземпляру класса.
 */
public class SingletonMain {
    public static void main(String[] args) {
        //Singleton singleton = new Singleton(); Программа выдаст ошибку! Мы не модем создавать новые обьекты
        // синглтона, поскольку конструктор приватный, мы модем только вызывать метод getInstance(), который
        // будет возвращать нам один и тот же обьект
        Singleton firstSingleton = Singleton.getInstance();
        Singleton secondSingleton = Singleton.getInstance();

        System.out.println(firstSingleton==secondSingleton);
        System.out.println(firstSingleton.equals(secondSingleton));
        //Что бы при использовании нескольких трэдов(многопоточности) обьект instance не создался несколько
        // раз, мы можем воспользоваться синхронизированной и ускоренной реализациейй паттерна синглтон.
        // (Ускорение заключается в том, что мы не обявляем весь метод getInstance synchronized, а делаем
        // синхронизированный блок на моменте создания нового обьекта(том месте, где и могут начаться проблемы
        // при многопоточности))
    }
}
/*
Однако у этого шаблона есть недостатки:
    1)Синглтон нарушает SRP (Single Responsibility Principle) — класс синглтона,
      помимо непосредственных обязанностей, занимается еще и контролированием количества своих экземпляров.

    2)Зависимость обычного класса или метода от синглтона не видна в публичном контракте класса.

    3)Глобальные переменные это плохо. Синглтон превращается в итоге в одну здоровенную глобальную переменную.

    4)Наличие синглтона снижает тестируемость приложения в целом и классов, которые используют синглтон,
     в частности.
 */
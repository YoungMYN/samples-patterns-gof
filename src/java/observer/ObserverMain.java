package observer;

import observer.concreteSubs.*;
/*
    Наблюдатель(Observer) – это поведенческий паттерн проектирования, который создаёт механизм подписки,
    позволяющий одним объектам следить и реагировать на события, происходящие в других объектах.

    Давайте называть Издателями те объекты, которые содержат важное или интересное для других состояние.
    Остальные объекты, которые хотят отслеживать изменения этого состояния, назовём Подписчиками.

    Паттерн Наблюдатель предлагает хранить внутри объекта издателя список ссылок на объекты подписчиков,
    причём издатель не должен вести список подписки самостоятельно. Он предоставит методы, с помощью которых
    подписчики могли бы добавлять или убирать себя из списка.
    Теперь самое интересное. Когда в издателе будет происходить важное событие, он будет проходиться
    по списку подписчиков и оповещать их об этом, вызывая определённый метод объектов-подписчиков.
    Издателю безразлично, какой класс будет иметь тот или иной подписчик,
    так как все они должны следовать общему интерфейсу и иметь единый метод оповещения.

    Так же вы можете выделить общий интерфейс, описывающий методы подписки и отписки, для всех издателей.
    После этого подписчики смогут работать с разными типами издателей, а также получать оповещения от них
    через один и тот же метод. Это сделает ваш код еще более гибким.


    В данном примере я не стал выделять общий интерфейс Издателя, сам класс Blogger содержит всю необходимую
    в данном случае логику. Зато подписчиков у меня несколько видов, и уведомления они могут получать сразу
    на всех площадках, благодаря общему интерфейсу.

    Применимость

    Когда после изменения состояния одного объекта требуется что-то сделать в других, но вы не
    знаете наперёд, какие именно объекты должны отреагировать.
        Описанная проблема может возникнуть при разработке библиотек пользовательского интерфейса,
        когда вам надо дать возможность сторонним классам реагировать на клики по кнопкам.

        Паттерн Наблюдатель позволяет любому объекту с интерфейсом подписчика зарегистрироваться
        на получение оповещений о событиях, происходящих в объектах-издателях.

    Когда одни объекты должны наблюдать за другими, но только в определённых случаях.
        Издатели ведут динамические списки. Все наблюдатели могут подписываться или отписываться
         от получения оповещений прямо во время выполнения программы.
 */


public class ObserverMain {
    public static void main(String[] args) {
        Blogger mrBeast = new Blogger("MrBeast");
        Subscriber alex = new YouTubeSubscriber();
        Subscriber mia = new YouTubeSubscriber();
        Subscriber john = new FacebookSubscriber();

        mrBeast.subscribe(alex);
        mrBeast.subscribe(mia);
        mrBeast.subscribe(john);

        mrBeast.releaseVideo("I BROKEN THE HOUSE WITH A 200 TON TRUCK");
    }
}
/*
Преимущества и недостатки
    Преимущества
        +Издатели не зависят от конкретных классов подписчиков и наоборот.
        +Вы можете подписывать и отписывать получателей на лету.
        +Реализует принцип открытости/закрытости.
    Недостатки
        -Подписчики оповещаются в случайном порядке.
 */
package behavioral.memento;

import behavioral.memento.computerStuffing.File;
import behavioral.memento.computerStuffing.Program;
/*
    Снимок(хранитель)(en.Memento) – это поведенческий паттерн проектирования, который позволяет сохранять
    и восстанавливать прошлые состояния объектов, не раскрывая подробностей их реализации.

    Паттерн Снимок поручает создание копии состояния объекта самому объекту, который этим состоянием владеет.
    Вместо того, чтобы делать снимок «извне», наш редактор сам сделает копию своих полей,
    ведь ему доступны все поля, даже приватные.

    Паттерн предлагает держать копию состояния в специальном объекте-снимке с ограниченным интерфейсом,
    позволяющим, например, узнать дату изготовления или название снимка.
    Но, с другой стороны, снимок должен быть открыт для своего создателя, позволяя прочесть
    и восстановить его внутреннее состояние.

    Такая схема позволяет создателям производить снимки и отдавать их для хранения другим объектам,
    называемым опекунами(Caretaker). Опекунам будет доступен только ограниченный интерфейс снимка,
    поэтому они никак не смогут повлиять на «внутренности» самого снимка.
    В нужный момент опекун может попросить создателя восстановить своё состояние,
    передав ему соответствующий снимок.

    Например, разрабатывая текстовый редактор вы можете сделать опекуном отдельный класс,
    который будет хранить список выполненных операций.
    Ограниченный интерфейс снимков позволит демонстрировать пользователю красивый список
    с названиями и датами выполненных операций. А когда пользователь решит откатить операцию,
    класс истории возьмёт последний снимок из стека и отправит его объекту редактор для восстановления.

    В моем примере кода паттерн Memento выполнен в своей классической реализации, и полагается на
    механизм вложенных класов, который позволяет получать доступ к полям и методам основного класса,
    не нарушая инкапсуляции.
    Компьютер может восстанавливать свое состояние из различных точек восстановления.
    Каждый экземпляр класса Memento как раз и является такой точкой, мы можем восстановиться из нее в любой
    момент с помощью метода setMemento.

    Применимость
        Когда вам нужно сохранять мгновенные снимки состояния объекта (или его части),
        чтобы впоследствии объект можно было восстановить в том же состоянии.
            Паттерн Снимок позволяет создавать любое количество снимков объекта и хранить их,
            независимо от объекта, с которого делают снимок. Снимки часто используют не только
            для реализации операции отмены, но и для транзакций, когда состояние объекта нужно
            «откатить», если операция не удалась.
        Когда прямое получение состояния объекта раскрывает приватные детали его реализации,
        нарушая инкапсуляцию.
            Паттерн предлагает изготовить снимок самому исходному объекту, поскольку ему доступны
            все поля, даже приватные.

 */
public class MementoMain {
    public static void main(String[] args) {
        ComputerCaretaker caretaker = new ComputerCaretaker(new Computer("MyPC"));
        caretaker.printComputerStatus();
        System.out.println("---------------------------------------");

        File file1 = new File("HelloWorld!");
        File file2 = new File("1232_13mnhBhjVDsf1244lf/////");
        Program word = new Program("Word","exe",5);
        Program theWitcher3 = new Program("THE WITCHER ||| WILD HUNT","exe",200);

        caretaker.installProgram(word);
        caretaker.installProgram(theWitcher3);

        caretaker.saveFile(file1);
        caretaker.saveFile(file2);
        /*
            Наглядная демонстрация процесса отмены действий:
            Отменяем операцию скачивания, т.е. удаляем файлы и программы и возвращаем свободное место на диске
         */
        for (int i = 0; i < 4; i++) {
            caretaker.printComputerStatus();
            caretaker.undo();
        }
        caretaker.printComputerStatus();
    }
}
/*
Преимущества
    +Не нарушает инкапсуляции исходного объекта.
    +Упрощает структуру исходного объекта. Ему не нужно хранить историю версий своего состояния.
Недостатки
    -Требует много памяти, если клиенты слишком часто создают снимки.
    -Может повлечь дополнительные издержки памяти, если объекты, хранящие историю,
        не освобождают ресурсы, занятые устаревшими снимками.
    -В некоторых языках (например, PHP, Python, JavaScript) сложно гарантировать,
        чтобы только исходный объект имел доступ к состоянию снимка.
 */
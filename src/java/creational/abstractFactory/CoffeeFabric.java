package creational.abstractFactory;
/*
Этот класс реализует шаблон Абстрактная Фабрика. CoffeeFabric - это абстракция над любой кофейной фабрикой,
"фабрика фабрик".


Абстрактная фабрика предоставляет интерфейс создания всех имеющихся продуктов (Product, см. картинку).
У абстрактной фабрики, как правило, есть несколько реализаций. Каждая из них отвечает за
создание продуктов одной из вариаций. Фабричный метод - часть абстрактной фабрики.


Абстрактная фабрика:
Порождающий шаблон проектирования, предоставляет интерфейс для создания
семейств взаимосвязанных или взаимозависимых объектов, не специфицируя их конкретных классов.
Шаблон реализуется созданием абстрактного класса Factory, который представляет собой интерфейс
для создания компонентов системы. Затем пишутся классы, реализующие этот интерфейс.
*/
public abstract class CoffeeFabric {
    public Coffee getPackedCoffee(){
        Coffee coffee = produceCoffee();
        if(!coffee.isPacked()){
            coffee.setPacked(true);
            System.out.println("Coffee packed!");
        }
        return coffee;
    }/*
    Фабричный метод собственной персоной. Он абстрактен, его реализуют наследники кофейной фабрики
    и сами решат какой кофе производить. Мы делегируем создание продукта классам наследникам,
    поскольку не знаем,что именно мы будем производить. Возможно в будущем изобретут еще какой нибудь
    вид кофе, ранее неизведанный, и нам для его производства НЕ нужно будет писать новое полотно кода.
    Всего лишь надо будет создать фабрику, которая переопределит метод и создаст этот новый вид кофе.
    Прелесть в том что мы всегда будем пользоваться фабричным методом для создания кофе.
    Если вдруг процедура создания кофе изменится, например нужно будет вести счетчик
     произведенного кофе, мы будем считать это в данном методе, а не искать ключевое слово new по
    всем классам программы, вдруг где то забыли посчитать.
    */
    protected abstract Coffee produceCoffee();
}

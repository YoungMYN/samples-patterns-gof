package structural.bridge;

import structural.bridge.concretePageThemes.DarkPageTheme;
import structural.bridge.concretePageThemes.LightPageTheme;
import structural.bridge.concretePages.NewsPage;

/*
  Bridge(Мост) - Структурный шаблон проектирования, используемый в проектировании программного обеспечения,
   чтобы «разделять абстракцию и реализацию так, чтобы они могли изменяться независимо».
  Шаблон мост использует инкапсуляцию, агрегирование и может использовать наследование для того,
  чтобы разделить ответственность между классами.

  Абстракция – это образный слой управления чем-либо. Он не делает работу самостоятельно,
   а делегирует её слою реализации.(тут понятия абстракция и реализация не совсем совпадают с их обычным
    контекстом, это не про абстрактные классы и интерфейсы)

   Абстракция будет делегировать работу одному из объектов реализаций.
    Причём, реализации можно будет взаимозаменять, но только при условии,
     что все они будут следовать общему интерфейсу.

   Если говорить о реальных программах, то абстракцией может выступать графический интерфейс программы (GUI)
   ,а реализацией – низкоуровневый код операционной системы (API),
    к которому графический интерфейс обращается по реакции на действия пользователя.

Вы можете развивать программу в двух разных направлениях:
    иметь несколько видов GUI (например, для простых пользователей и администраторов);
    поддерживать много видов API (например, работать под Windows, Linux и macOS).

   В моем коде, Page - это абстракция, и она не закрашивает свои веб-страницы самостоятельно, она передет
   эту задачу слою реализации(Классам DarkPageTheme и LightPageTheme, следующих общему интерфейсу PageTheme)
 */
public class BridgeMain {
    public static void main(String[] args) {
        Page news = new NewsPage(new LightPageTheme());

        System.out.println(news.getTitle());
        news.getContent().forEach(System.out::println);

        news.setTheme(new DarkPageTheme());

    }
}
/*
Преимущества Bridge:
    Улучшает масштабируемость кода — можно добавлять функционал, не боясь сломать что-то в другой части
        программы.
    Уменьшает количество подклассов — работает при необходимости расширения количества сущностей в две
        стороны (например, количество тем оформления и количество веб-страниц).
    Дает возможность отдельно работать над двумя самостоятельными ветками Абстракции и Реализации
        — это могут делать два разных разработчика, не вникая в детали кода друг друга.
    Уменьшение связанности классов — единственное место связки двух классов — это мост (поле PageTheme theme).
    Скрывает лишние или опасные детали реализации от клиентского кода.
    Реализует принцип открытости/закрытости.
Недостатки Bridge:
    В зависимости от конкретной ситуации и структуры проекта в целом, возможно негативное влияние на
        продуктивность программы (например, если нужно инициализировать большее количество объектов).
    Усложняет читаемость кода из-за необходимости навигации между классами.
 */